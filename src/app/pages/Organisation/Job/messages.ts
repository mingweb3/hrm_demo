/**
 * This file is only need if you want to extract messages into JSON files in locales folder
 * AND if you are also using the object syntax instead of string syntax. \
 * Check the documentation section i18n for details
 */
import { translations } from '@/locales/translations'
import { _t } from '@/utils/messages'

export const messages = {
  Dashboard: () => _t(translations.common.Dashboard),
  Submit: () => _t(translations.common.Submit),
  update: () => _t(translations.common.update),
  filter: () => _t(translations.common.filter),
  filter_data: () => _t(translations.common.filter_data),
  clear: () => _t(translations.common.clear),
  close: () => _t(translations.common.close),
  cancel: () => _t(translations.common.cancel),
  Status: () => _t(translations.common.Status),
  created_date_from: () => _t(translations.common.created_date_from),
  created_date_to: () => _t(translations.common.created_date_to),
  active: () => _t(translations.status.active),
  'on-hold': () => _t(translations.status['on-hold']),
  closed: () => _t(translations.status.closed),
  remove: () => _t(translations.common.remove),
  hold_on: () => _t(translations.common.hold_on),
  draft: () => _t(translations.status.draft),
  'Organization details': () => _t(translations.organization['Organization details']),
  'Job title': () => _t(translations.job['Job title']),
  Department: () => _t(translations.job.Department),
  'Start date': () => _t(translations.job['Start date']),
  'Closed date': () => _t(translations.job['Closed date']),
  'Min salary': () => _t(translations.job['Min salary']),
  'Max salary': () => _t(translations.job['Max salary']),
  'Created by': () => _t(translations.job['Created by']),
  'Create new job': () => _t(translations.job['Create new job']),
  DepartmentSkills: () => _t(translations.job.DepartmentSkills),
  'Job description': () => _t(translations.job['Job description']),
  'Salary / Benefit / Policy': () => _t(translations.job['Salary / Benefit / Policy']),
  'Displaying salary type': () => _t(translations.job['Displaying salary type']),
  Currency: () => _t(translations.job.Currency),
  'Edit job': () => _t(translations.job['Edit job']),
  Salary: () => _t(translations.job.Salary),
  'Contract type': () => _t(translations.job['Contract type']),
  Experience: () => _t(translations.job.Experience),
  Divisions: () => _t(translations.job.Divisions),
  Section: () => _t(translations.job.Section),
  'Add skill': () => _t(translations.job['Add skill']),
  'Number of openings': () => _t(translations.job['Number of openings']),
  'Probation period': () => _t(translations.job['Probation period']),
  'Annual leave': () => _t(translations.job['Annual leave']),
  'Over-time': () => _t(translations.job['Over-time']),
  'Performance bonus': () => _t(translations.job['Performance bonus']),
  AWS: () => _t(translations.job.AWS),
  'Overtime transport claims': () => _t(translations.job['Overtime transport claims']),
  'Overtime meal allowance': () => _t(translations.job['Overtime meal allowance']),
  'Transport allowance minimum': () => _t(translations.job['Transport allowance minimum']),
  'Transport allowance maximum': () => _t(translations.job['Transport allowance maximum']),
  'Shuttle service': () => _t(translations.job['Shuttle service']),
  'Shuttle service details': () => _t(translations.job['Shuttle service details']),
  'Other allowance amount': () => _t(translations.job['Other allowance amount']),
  Benefit: () => _t(translations.job.Benefit),
  'Other benefits': () => _t(translations.job['Other benefits']),
  'Other policies': () => _t(translations.job['Other policies']),
  'Open to foreigner': () => _t(translations.job['Open to foreigner']),
  'Foreigner quota': () => _t(translations.job['Foreigner quota']),
  'MRF ID': () => _t(translations.job['MRF ID']),
  PermissbleForeigner: () => _t(translations.job.PermissbleForeigner),
  'MRF type': () => _t(translations.job['MRF type']),
  Asignee: () => _t(translations.users.Asignee),
  organisations: () => _t(translations.organization.Organizations),
  PreferredCommitment: () => _t(translations.CandidateInfo['Preferred commitment']),
  CreateNewSuccess: () => _t(translations.common.CreateNewSuccess),
  UpdateSuccess: () => _t(translations.common.UpdateSuccess),
  Publish: () => _t(translations.common.Publish),
  'Hold on': () => _t(translations.common.hold_on),
  Close: () => _t(translations.common.close),
  'Re-use': () => _t(translations.common['Re-use']),
  'Selected Skills': () => _t(translations.job['Selected Skills']),
  SkillExists: () => _t(translations.job.SkillExists),
  Workplaces: () => _t(translations.job.Workplaces),
  AddWorkplaces: () => _t(translations.job.AddWorkplaces),
  SelectedWorkplaces: () => _t(translations.job.SelectedWorkplaces),
  WorkplaceExists: () => _t(translations.job.WorkplaceExists),
  Skills: () => _t(translations.Department.Skills),
  'Candidates in a job': () => _t(translations.job['Candidates in a job']),
  ApplyCandidate: () => _t(translations.job.ApplyCandidate),
  CandidateName: () => _t(translations.Candidate['Candidate name']),
  Email: () => _t(translations.common.Email),
  Nationality: () => _t(translations.common.Nationality),
  Location: () => _t(translations.common.Location),
  JobLevel: () => _t(translations.CandidateInfo['Job level']),
  Candidate: () => _t(translations.Candidate.Candidate),
  'Job Level / Grade': () => _t(translations.Candidate['Job Level / Grade']),
  Time: () => _t(translations.CandidatePlacement.Time),
  Recruiter: () => _t(translations.Candidate.Recruiter),
  'Cur Location': () => _t(translations.Candidate['Cur Location']),
  assignedOn: () => _t(translations.CandidatePlacement['Assigned On']),
  updatedOn: () => _t(translations.CandidatePlacement['Updated On']),
  'Status of placement': () => _t(translations.Candidate['Status of placement']),
  'Assign candidate': () => _t(translations.CandidatePlacement['Assign candidate']),
  'Find Your Candidate': () => _t(translations.Candidate['Find Your Candidate']),
  ExpectedSalary: () => _t(translations.CandidateInfo['Expected salary']),
  'Find Candidate': () => _t(translations.Candidate['Find Candidate']),
  Reset: () => _t(translations.common.Reset),
  Candidates: () => _t(translations.Candidate.Candidates),
  InterviewDate: () => _t(translations.CandidatePlacement['Interview date']),
  PanelOfInterviewers: () => _t(translations.CandidatePlacement['Panel of interviewers']),
  MeetingRoomUrl: () => _t(translations.CandidatePlacement['Meeting room url']),
  Assign: () => _t(translations.CandidatePlacement.Assign),
  Back: () => _t(translations.common.Back),
  'Current job': () => _t(translations.Candidate['Current job']),
  'No Candidates Found': () => _t(translations.Candidate['No Candidates Found']),
  JobDetails: () => _t(translations.job.JobDetails),
  AppliedCandidates: () => _t(translations.job.AppliedCandidates),
  JobSuitability: () => _t(translations.Candidate['Job Suitability'])
}
