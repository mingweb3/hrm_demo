/**
 * This file is only need if you want to extract messages into JSON files in locales folder
 * AND if you are also using the object syntax instead of string syntax. \
 * Check the documentation section i18n for details
 */
import { translations } from '@/locales/translations'
import { _t } from '@/utils/messages'

export const messages = {
  submit: () => _t(translations.common.Submit),
  filter: () => _t(translations.common.filter),
  filterData: () => _t(translations.common.filter_data),
  clear: () => _t(translations.common.clear),
  close: () => _t(translations.common.close),
  cancel: () => _t(translations.common.cancel),
  assignCandidate: () => _t(translations.CandidatePlacement['Assign candidate']),
  jobTitle: () => _t(translations.CandidatePlacement['Job Title']),
  organization: () => _t(translations.CandidatePlacement.Organization),
  time: () => _t(translations.CandidatePlacement.Time),
  status: () => _t(translations.common.Status),
  assignedRecruiter: () => _t(translations.CandidatePlacement['Assigned Recruiter']),
  editCandidate: () => _t(translations.Candidate['Edit candidate']),
  assignedOn: () => _t(translations.CandidatePlacement['Assigned On']),
  updatedOn: () => _t(translations.CandidatePlacement['Updated On']),
  AssignedDateFrom: () => _t(translations.CandidatePlacement['Assigned date from']),
  AssignedDateTo: () => _t(translations.CandidatePlacement['Assigned date to']),
  Assign: () => _t(translations.CandidatePlacement.Assign),
  Deactivate: () => _t(translations.CandidatePlacement.Deactivate),
  CandidateGrade: () => _t(translations.CandidatePlacement['Candidate grade']),
  CurrentCandidate: () => _t(translations.CandidatePlacement['Current candidate']),
  Name: () => _t(translations.CandidatePlacement.Name),
  InterviewDate: () => _t(translations.CandidatePlacement['Interview date']),
  PanelOfInterviewers: () => _t(translations.CandidatePlacement['Panel of interviewers']),
  MeetingRoomUrl: () => _t(translations.CandidatePlacement['Meeting room url']),
  Offer: () => _t(translations.CandidatePlacement.Offer),
  ProbationaryPeriod: () => _t(translations.CandidatePlacement['Probationary Period']),
  CommencementDate: () => _t(translations.CandidatePlacement['Commencement Date']),
  ConfirmationDate: () => _t(translations.CandidatePlacement['Confirmation Date']),
  LastDay: () => _t(translations.CandidatePlacement['Last Day']),
  OfferMade: () => _t(translations.CandidatePlacement['Offer Made']),
  LOASigned: () => _t(translations.CandidatePlacement['LOA Signed']),
  BasicOffered: () => _t(translations.CandidatePlacement['Basic offered']),
  OfferAccepted: () => _t(translations.CandidatePlacement['Offer accepted']),
  Currency: () => _t(translations.CandidatePlacement.Currency),
  TransportAllowance: () => _t(translations.CandidatePlacement['Transport Allowance']),
  OtherAllowance: () => _t(translations.CandidatePlacement['Other Allowance']),
  Interview: () => _t(translations.CandidatePlacement.Interview),
  VideoInterviewLink: () => _t(translations.CandidatePlacement['Video interview link']),
  ReasonForRejection: () => _t(translations.CandidatePlacement['Reason For Rejection']),
  Notes: () => _t(translations.common.Notes),
  Remark: () => _t(translations.CandidatePlacement.Remark),
  YearOfRelevantExperience: () => _t(translations.CandidatePlacement['Year of Relevant Experience']),
  Update: () => _t(translations.common.update),
  EditPlacement: () => _t(translations.CandidatePlacement['Edit placement']),
  Dashboard: () => _t(translations.common.Dashboard),
  Candidates: () => _t(translations.Candidate.Candidates),
  CreateCandidate: () => _t(translations.Candidate['Create candidate']),
  CandidateName: () => _t(translations.Candidate['Candidate name']),
  ContactNumber: () => _t(translations.common['Contact number']),
  Email: () => _t(translations.common.Email),
  Nationality: () => _t(translations.common.Nationality),
  NationalId: () => _t(translations.common['National ID']),
  Gender: () => _t(translations.common.Gender),
  YearOfBirth: () => _t(translations.common['Year of birth']),
  Race: () => _t(translations.Candidate.Race),
  CurrentLocation: () => _t(translations.Candidate['Current location']),
  AreaOfResidence: () => _t(translations.Candidate['Area of residence']),
  NewPassword: () => _t(translations.common['New password']),
  ReTypeNewPassword: () => _t(translations.common['Re-type new password']),
  ITSaviness: () => _t(translations.CandidateInfo['IT saviness']),
  CandidateNotes: () => _t(translations.CandidateInfo['Candidate notes']),
  COVIDVaccine: () => _t(translations.CandidateInfo['COVID vaccine']),
  ModeOfTransport: () => _t(translations.CandidateInfo['Mode of transport']),
  VEPAutopass: () => _t(translations.CandidateInfo['VEP autopass']),
  'Education / Department / Skills': () => _t(translations.CandidateInfo['Education / Department / Skills']),
  'Job suitability (Section)': () => _t(translations.CandidateInfo['Job suitability (Section)']),
  OverallCandidateGrade: () => _t(translations.CandidateInfo['Overall candidate grade']),
  LatestEducation: () => _t(translations.CandidateInfo['Latest education']),
  Language: () => _t(translations.CandidateInfo.Language),
  Written: () => _t(translations.CandidateInfo.Written),
  Level: () => _t(translations.CandidateInfo.Level),
  Major: () => _t(translations.CandidateInfo.Major),
  Department: () => _t(translations.common.Department),
  AddSkill: () => _t(translations.CandidateInfo['Add skill']),
  JobLevel: () => _t(translations.CandidateInfo['Job level']),
  ReferralMode: () => _t(translations.CandidateInfo['Referral mode']),
  CandidateSource: () => _t(translations.CandidateInfo.CandidateSource),
  PreferredCommitment: () => _t(translations.CandidateInfo['Preferred commitment']),
  SalaryBenefit: () => _t(translations.CandidateInfo.SalaryBenefit),
  CurrentSalary: () => _t(translations.CandidateInfo['Current salary']),
  ExpectedSalary: () => _t(translations.CandidateInfo['Expected salary']),
  NoticePeriod: () => _t(translations.CandidateInfo['Notice period']),
  OvertimeCommitment: () => _t(translations.CandidateInfo['Overtime Commitment']),
  WeekendCommitment: () => _t(translations.CandidateInfo['Weekend Commitment']),
  PhysicalHealth: () => _t(translations.CandidateInfo['Physical Health']),
  AddSection: () => _t(translations.CandidateInfo['Add section']),
  Period: () => _t(translations.common.Period),
  currentPassType: () => _t(translations.Candidate.currentPassType),
  CreateNewSuccess: () => _t(translations.common.CreateNewSuccess),
  UpdateSuccess: () => _t(translations.common.UpdateSuccess),
  Document: () => _t(translations.Document.Document),
  UploadFile: () => _t(translations.Document.UploadFile),
  RemoveThisItem: () => _t(translations.common.RemoveThisItem),
  RemovedSuccess: () => _t(translations.common.RemovedSuccess),
  UploadFileSuccess: () => _t(translations.common.UploadFileSuccess)
}
